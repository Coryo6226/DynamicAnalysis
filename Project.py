#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 6.0.1
#  in conjunction with Tcl version 8.6
#    Apr 19, 2021 10:04:34 PM BST  platform: Windows NT

import sys
import r2pipe
import ctypes
import filecmp
import os
import os.path

try:
    import Tkinter as tk
except ImportError:
	import tkinter as tk
	from tkinter import filedialog
	from tkinter import simpledialog

try:
    import ttk
    py3 = False
except ImportError:
    import tkinter.ttk as ttk
    py3 = True

import Project_support


def is_admin():
    try:
        return ctypes.windll.shell32.IsUserAnAdmin()
    except:
        return False

if is_admin():
		def vp_start_gui():
			'''Starting point when module is the main routine.'''
			global val, w, root
			root = tk.Tk()
			top = Toplevel1 (root)
			Project_support.init(root, top)
			root.mainloop()

		w = None
		def create_Toplevel1(rt, *args, **kwargs):
			'''Starting point when module is imported by another module.
			   Correct form of call: 'create_Toplevel1(root, *args, **kwargs)' .'''
			global w, w_win, root
			#rt = root
			root = rt
			w = tk.Toplevel (root)
			top = Toplevel1 (w)
			Project_support.init(w, top, *args, **kwargs)
			return (w, top)

		def destroy_Toplevel1():
			global w
			w.destroy()
			w = None

		class Toplevel1:
			

				def myfunc():
						global file_path
						file_path = "null"

					
				myfunc()    #Initialising the file_path variable
				
				def PickFile(self):		#Creating pick file function
					root = tk.Tk()
					root.withdraw()
					global file_path
					file_path = filedialog.askopenfilename()    #file_path = to file chosen in file explorer
						
					if file_path == "null":
								ctypes.windll.user32.MessageBoxW(0, "Please choose a file!", "ERROR", 0)
								
					else:
									global r2
									r2 = r2pipe.open(file_path)
									r2.cmd('aaa; pdf @@f > outD.txt; dm > outM.txt; pxr @ esp > outS.txt; dr > outR.txt')    #r2 functions to run if file_path isnt empty                  
											
									with open ("outD.txt", 'r') as f:
											self.Display1.insert(1.0, f.read())
												  
									with open ("outM.txt", 'r') as f:
											self.Display4.insert(1.0, f.read())	
												
									with open ("outS.txt", 'r') as f:
											self.Display3.insert(1.0, f.read())
											
									with open ("outR.txt", 'r') as f:
											self.Display5.insert(1.0, f.read())

					
			
						
			
				
									
									
									
									
				def DebugFile(self):				#Initalising debug function
					if file_path != "null":
							r2.cmd("doo")			#r2 command to set file to debug mode
							
					else:
						ctypes.windll.user32.MessageBoxW(0, "Please choose a file!", "ERROR", 0)
							
									
				
				
				
				def Breakpoint(self):				#Initalising breakpoint function
						if file_path != "null":
							Breakpoint = "set"
							Breakpoint = simpledialog.askstring(title="Breakpoint", prompt="Set Breakpoint")  #breakpoint is = to string entered in prompt
							if Breakpoint != "set":
								r2.cmd("db" + " "+ Breakpoint)
								r2.cmd("db > outBP.txt")
								Breakpoint = "set"
							else:
								r2.cmd("db > outBP.txt")
							
							with open ("outBP.txt", 'r') as f:
								self.Display5.configure(foreground="brown")
								self.Display2.insert(1.0, f.read())							
							
							
						else:
									ctypes.windll.user32.MessageBoxW(0, "Please choose a file!", "ERROR", 0)
					 
							
						
					
				def contFile(self):						#Initalising continue execution function
						if file_path != "null":
							r2.cmd('dc > outC.txt') 
							
							if os.path.isfile("outR.txt"):   	#check if file exists
								filesize = os.path.getsize("outR.txt")
							
								if filesize == 0:			#If the file exists but dosent have anything in it do this
									r2.cmd('dr > outR.txt')
									with open ("outR.txt", 'r') as f:
										self.Display5.configure(foreground="black")
										self.Display5.insert(1.0, f.read())
										os.remove("outR.txt")
									
								else: 
									r2.cmd('dr > OutR1.txt')		#If the file exists but dose have something in it do this
								
									with open ("outR1.txt", 'r') as f:
										self.Display5.configure(foreground="green")
										self.Display5.insert(1.0, f.read())
									
									os.remove("outR1.txt")			
									os.remove("outR.txt")
							
							else:
								
								f = open("outR.txt", "x")			#Creates the file 
								filesize = os.path.getsize("outR.txt")
								if filesize == 0:					#If the 
									r2.cmd('dr > outR.txt')
									
									with open ("outR.txt", 'r') as f:
										self.Display5.configure(foreground="black")
										self.Display5.insert(1.0, f.read())

									
								else: 
									r2.cmd('dr > OutR1.txt')

									
									with open ("outR1.txt", 'r') as f:
										self.Display5.configure(foreground="yellow")
										self.Display5.insert(1.0, f.read())
									
									os.remove("outR1.txt")
									os.remove("outR.txt")
							            
							
							if os.path.isfile("outS.txt"):   	#check if file exists
								filesize = os.path.getsize("outS.txt")
							
								if filesize == 0:
									r2.cmd('pxr @ esp > outS.txt')
									with open ("outS.txt", 'r') as f:
										self.Display3.configure(foreground="black")
										self.Display3.insert(1.0, f.read())
			
									
								else: 
									r2.cmd('pxr @ esp > outS1.txt')
									
									with open ("outS1.txt", 'r') as f:
										self.Display3.configure(foreground="red")
										self.Display3.insert(1.0, f.read())
									
									os.remove("outS.txt")
									os.remove("outS1.txt")
							
							else:
								
								f = open("outS.txt", "x")
								filesize = os.path.getsize("outS.txt")
								if filesize == 0:
									r2.cmd('pxr @ esp > outS.txt')
									
									with open ("outS.txt", 'r') as f:
										self.Display3.configure(foreground="black")
										self.Display3.insert(1.0, f.read())
									
									
								else: 
									r2.cmd('pxr @ esp > OutS1.txt')
			
									
									with open ("outS1.txt", 'r') as f:
										self.Display3.configure(foreground="yellow")
										self.Display3.insert(1.0, f.read())
									
									os.remove("outM1.txt")
									os.remove("outM.txt")
									
									
							if os.path.isfile("outM.txt"):   	#check if file exists
								filesize = os.path.getsize("outM.txt")
							
								if filesize == 0:
									r2.cmd('dm > outM.txt')
									with open ("outM.txt", 'r') as f:
										self.Display4.configure(foreground="black")
										self.Display4.insert(1.0, f.read())
			
									
								else: 
									r2.cmd('dm > outM1.txt')
									
									with open ("outM1.txt", 'r') as f:
										self.Display4.configure(foreground="red")
										self.Display4.insert(1.0, f.read())
									
									os.remove("outM.txt")
									os.remove("outM1.txt")
							
							else:
								
								f = open("outM.txt", "x")
								filesize = os.path.getsize("outM.txt")
								if filesize == 0:
									r2.cmd('dm  > outM.txt')
									
									with open ("outM.txt", 'r') as f:
										self.Display4.configure(foreground="black")
										self.Display4.insert(1.0, f.read())
									
									
								else: 
									r2.cmd('dm > OutM1.txt')
			
									
									with open ("outM1.txt", 'r') as f:
										self.Display4.configure(foreground="yellow")
										self.Display4.insert(1.0, f.read())
									
									os.remove("outM1.txt")
									os.remove("outM.txt")				  
							

							with open ("outC.txt", 'r') as f:
									self.Display2.insert(1.0, f.read())
			#				with open ("outM.txt", 'r') as f:
			#						self.Display4.insert(1.0, f.read())		
															
								
						else:
									ctypes.windll.user32.MessageBoxW(0, "Please choose a file!", "ERROR", 0)
									
									
				def StepFile(self):
					if file_path != "null":
						r2.cmd('ds > outST.txt')                     
							
						with open ("outST.txt", 'r') as f:
							self.Display2.insert(1.0, f.read())
							
						if os.path.isfile("outR.txt"):   	#check if file exists
								filesize = os.path.getsize("outR.txt")
							
								if filesize == 0:
									r2.cmd('dr > outR.txt')
									with open ("outR.txt", 'r') as f:
										self.Display5.configure(foreground="black")
										self.Display5.insert(1.0, f.read())
										os.remove("outR.txt")
									
								else: 
									r2.cmd('dr > OutR1.txt')
								
									with open ("outR1.txt", 'r') as f:
										self.Display5.configure(foreground="green")
										self.Display5.insert(1.0, f.read())
									
									os.remove("outR1.txt")
									os.remove("outR.txt")
							
						else:
								
								f = open("outR.txt", "x")
								filesize = os.path.getsize("outR.txt")
								if filesize == 0:
									r2.cmd('dr > outR.txt')
									
									with open ("outR.txt", 'r') as f:
										self.Display5.configure(foreground="purple")
										self.Display5.insert(1.0, f.read())

									
								else: 
									r2.cmd('dr > OutR1.txt')

									
									with open ("outR1.txt", 'r') as f:
										self.Display5.configure(foreground="pink")
										self.Display5.insert(1.0, f.read())
									
									os.remove("outR1.txt")
									os.remove("outR.txt")
							            
							
						if os.path.isfile("outS.txt"):   	#check if file exists
								filesize = os.path.getsize("outS.txt")
							
								if filesize == 0:
									r2.cmd('pxr @ esp > outS.txt')
									with open ("outS.txt", 'r') as f:
										self.Display3.configure(foreground="black")
										self.Display3.insert(1.0, f.read())
			
									
								else: 
									r2.cmd('pxr @ esp > outS1.txt')
									
									with open ("outS1.txt", 'r') as f:
										self.Display3.configure(foreground="red")
										self.Display3.insert(1.0, f.read())
									
									os.remove("outS.txt")
									os.remove("outS1.txt")
							
						else:
								
								f = open("outS.txt", "x")
								filesize = os.path.getsize("outS.txt")
								if filesize == 0:
									r2.cmd('pxr @ esp > outS.txt')
									
									with open ("outS.txt", 'r') as f:
										self.Display3.configure(foreground="black")
										self.Display3.insert(1.0, f.read())
									
									
								else: 
									r2.cmd('pxr @ esp > OutS1.txt')
			
									
									with open ("outS1.txt", 'r') as f:
										self.Display3.configure(foreground="yellow")
										self.Display3.insert(1.0, f.read())
									
									os.remove("outS1.txt")
									os.remove("outS.txt")
						
						if os.path.isfile("outM.txt"):   	#check if file exists
								filesize = os.path.getsize("outM.txt")
							
								if filesize == 0:
									r2.cmd('dm > outM.txt')
									with open ("outM.txt", 'r') as f:
										self.Display4.configure(foreground="black")
										self.Display4.insert(1.0, f.read())
			
									
								else: 
									r2.cmd('dm > outM1.txt')
									
									with open ("outM1.txt", 'r') as f:
										self.Display4.configure(foreground="red")
										self.Display4.insert(1.0, f.read())
									
									os.remove("outM.txt")
									os.remove("outM1.txt")
							
						else:
								
								f = open("outM.txt", "x")
								filesize = os.path.getsize("outM.txt")
								if filesize == 0:
									r2.cmd('dm  > outM.txt')
									
									with open ("outM.txt", 'r') as f:
										self.Display4.configure(foreground="blue")
										self.Display4.insert(1.0, f.read())
									
									
								else: 
									r2.cmd('dm > OutM1.txt')
			
									
									with open ("outM1.txt", 'r') as f:
										self.Display4.configure(foreground="yellow")
										self.Display4.insert(1.0, f.read())
									
									os.remove("outM1.txt")
									os.remove("outM.txt")				  			  	
							
					else:
						ctypes.windll.user32.MessageBoxW(0, "Please choose a file!", "ERROR", 0)
					

				
				def DelBP(self):
						if file_path != "null":
							Breakpoint = "set"
							Breakpoint = simpledialog.askstring(title="Breakpoint", prompt="Delete Breakpoint")
							if Breakpoint != "set":
								r2.cmd("db" + " "+ "-"+ Breakpoint)
								r2.cmd("db > outBP.txt")
								Breakpoint = "set"
							else:
								r2.cmd("db > outBP.txt")
							
							with open ("outBP.txt", 'r') as f:
								self.Display5.configure(foreground="brown")
								self.Display2.insert(1.0, f.read())							
							
							
					
						else:
									ctypes.windll.user32.MessageBoxW(0, "Please choose a file!", "ERROR", 0)														
									
				
				def ClearFile(self):

						self.Display1.delete("1.0", tk.END)
						self.Display2.delete("1.0", tk.END)
						self.Display3.delete("1.0", tk.END)
						self.Display4.delete("1.0", tk.END)
						self.Display5.delete("1.0", tk.END)
						
			
				def __init__(self, top=None):
					'''This class configures and populates the toplevel window.
					top is the toplevel containing window.'''
					_bgcolor = '#d9d9d9'  # X11 color: 'gray85'
					_fgcolor = '#000000'  # X11 color: 'black'
					_compcolor = '#d9d9d9' # X11 color: 'gray85'
					_ana1color = '#d9d9d9' # X11 color: 'gray85'
					_ana2color = '#ececec' # Closest X11 color: 'gray92'
					

					top.geometry("760x528+405+109")
					top.minsize(120, 1)
					top.maxsize(1540, 845)
					top.resizable(1,  1)
					top.title("Dynamic Analysis Tool")
					top.configure(background="#b5c1fd")
					top.configure(highlightbackground="#d9d9d9")
					top.configure(highlightcolor="black")

					self.FileBtn = tk.Button(top)
					self.FileBtn.place(relx=0.0, rely=0.0, height=24, width=47)
					self.FileBtn.configure(activebackground="#ececec")
					self.FileBtn.configure(activeforeground="#000000")
					self.FileBtn.configure(background="#c6c6ff")
					self.FileBtn.configure(disabledforeground="#a3a3a3")
					self.FileBtn.configure(foreground="#000000")
					self.FileBtn.configure(highlightbackground="#c6c6ff")
					self.FileBtn.configure(highlightcolor="black")
					self.FileBtn.configure(pady="0")
					self.FileBtn.configure(text='''File''')
					self.FileBtn.configure(command=self.PickFile);


					self.DebugBtn = tk.Button(top)
					self.DebugBtn.place(relx=0.08, rely=0.0, height=24, width=77)
					self.DebugBtn.configure(activebackground="#ececec")
					self.DebugBtn.configure(activeforeground="#000000")
					self.DebugBtn.configure(background="#c6c6ff")
					self.DebugBtn.configure(disabledforeground="#a3a3a3")
					self.DebugBtn.configure(foreground="#000000")
					self.DebugBtn.configure(highlightbackground="#d9d9d9")
					self.DebugBtn.configure(highlightcolor="black")
					self.DebugBtn.configure(pady="0")
					self.DebugBtn.configure(text='''Debug''')
					self.DebugBtn.configure(command=self.DebugFile);
					
					
					self.DelBtn = tk.Button(top)
					self.DelBtn.place(relx=0.34, rely=0.0, height=24, width=114)
					self.DelBtn.configure(activebackground="#ececec")
					self.DelBtn.configure(activeforeground="#000000")
					self.DelBtn.configure(background="#c6c6ff")
					self.DelBtn.configure(disabledforeground="#a3a3a3")
					self.DelBtn.configure(foreground="#000000")
					self.DelBtn.configure(highlightbackground="#d9d9d9")
					self.DelBtn.configure(highlightcolor="black")
					self.DelBtn.configure(pady="0")
					self.DelBtn.configure(text='''Remove Breakpoint''')
					self.DelBtn.configure(command=self.DelBP);					
					
					
					
					self.BreakpointBtn = tk.Button(top)
					self.BreakpointBtn.place(relx=0.2, rely=0.0, height=24, width=87)
					self.BreakpointBtn.configure(activebackground="#ececec")
					self.BreakpointBtn.configure(activeforeground="#000000")
					self.BreakpointBtn.configure(background="#c6c6ff")
					self.BreakpointBtn.configure(disabledforeground="#a3a3a3")
					self.BreakpointBtn.configure(foreground="#000000")
					self.BreakpointBtn.configure(highlightbackground="#d9d9d9")
					self.BreakpointBtn.configure(highlightcolor="black")
					self.BreakpointBtn.configure(pady="0")
					self.BreakpointBtn.configure(text='''Breakpoint''')
					self.BreakpointBtn.configure(command=self.Breakpoint);

					
					self.contBtn = tk.Button(top)
					self.contBtn.place(relx=0.52, rely=0.0, height=24, width=117)
					self.contBtn.configure(activebackground="#ececec")
					self.contBtn.configure(activeforeground="#000000")
					self.contBtn.configure(background="#c6c6ff")
					self.contBtn.configure(disabledforeground="#a3a3a3")
					self.contBtn.configure(foreground="#000000")
					self.contBtn.configure(highlightbackground="#d9d9d9")
					self.contBtn.configure(highlightcolor="black")
					self.contBtn.configure(pady="0")
					self.contBtn.configure(text='''Continue Execution''')
					self.contBtn.configure(command=self.contFile);
					
					
					self.BtnStep = tk.Button(top)
					self.BtnStep.place(relx=0.7, rely=0.0, height=24, width=47)
					self.BtnStep.configure(activebackground="#ececec")
					self.BtnStep.configure(activeforeground="#000000")
					self.BtnStep.configure(background="#c6c6ff")
					self.BtnStep.configure(disabledforeground="#a3a3a3")
					self.BtnStep.configure(foreground="#000000")
					self.BtnStep.configure(highlightbackground="#d9d9d9")
					self.BtnStep.configure(highlightcolor="black")
					self.BtnStep.configure(pady="0")
					self.BtnStep.configure(text='''Step''')
					self.BtnStep.configure(command=self.StepFile);



					self.menubar = tk.Menu(top,font="TkMenuFont",bg=_bgcolor,fg=_fgcolor)
					top.configure(menu = self.menubar)

					self.Registers = tk.Label(top)
					self.Registers.place(relx=0.733, rely=0.067, height=21, width=54)
					self.Registers.configure(activebackground="#f9f9f9")
					self.Registers.configure(activeforeground="black")
					self.Registers.configure(background="#b5c1fd")
					self.Registers.configure(disabledforeground="#a3a3a3")
					self.Registers.configure(foreground="#000000")
					self.Registers.configure(highlightbackground="#d9d9d9")
					self.Registers.configure(highlightcolor="black")
					self.Registers.configure(text='''Registers''')

					self.Stack = tk.Label(top)
					self.Stack.place(relx=0.75, rely=0.711, height=21, width=34)
					self.Stack.configure(activebackground="#f9f9f9")
					self.Stack.configure(activeforeground="black")
					self.Stack.configure(background="#b5c1fd")
					self.Stack.configure(disabledforeground="#a3a3a3")
					self.Stack.configure(foreground="#000000")
					self.Stack.configure(highlightbackground="#d9d9d9")
					self.Stack.configure(highlightcolor="black")
					self.Stack.configure(text='''Stack''')
					
					self.Clear = tk.Button(top)
					self.Clear.place(relx=0.917, rely=0.0, height=24, width=47)
					self.Clear.configure(activebackground="#ececec")
					self.Clear.configure(activeforeground="#000000")
					self.Clear.configure(background="#b5c1fd")
					self.Clear.configure(disabledforeground="#a3a3a3")
					self.Clear.configure(foreground="#000000")
					self.Clear.configure(highlightbackground="#d9d9d9")
					self.Clear.configure(highlightcolor="black")
					self.Clear.configure(pady="0")
					self.Clear.configure(text='''Clear''')
					self.Clear.configure(command=self.ClearFile);

					self.Label1 = tk.Label(top)
					self.Label1.place(relx=0.733, rely=0.4, height=21, width=54)
					self.Label1.configure(activebackground="#f9f9f9")
					self.Label1.configure(activeforeground="black")
					self.Label1.configure(background="#b5c1fd")
					self.Label1.configure(disabledforeground="#a3a3a3")
					self.Label1.configure(foreground="#000000")
					self.Label1.configure(highlightbackground="#d9d9d9")
					self.Label1.configure(highlightcolor="black")
					self.Label1.configure(text='''Memory''')

					self.Message1 = tk.Message(top)
					self.Message1.place(relx=0.183, rely=0.489, height=21, width=34)
					self.Message1.configure(background="#b5c1fd")
					self.Message1.configure(foreground="#000000")
					self.Message1.configure(highlightbackground="#d9d9d9")
					self.Message1.configure(highlightcolor="black")
					self.Message1.configure(text='''Debug''')
					self.Message1.configure(width=60)

					self.Message2 = tk.Message(top)
					self.Message2.place(relx=0.183, rely=0.067, height=21, width=84)
					self.Message2.configure(background="#b5c1fd")
					self.Message2.configure(foreground="#000000")
					self.Message2.configure(highlightbackground="#d9d9d9")
					self.Message2.configure(highlightcolor="black")
					self.Message2.configure(text='''Dissasemble''')
					self.Message2.configure(width=90)

					self.Display1 = tk.Text(top)
					self.Display1.place(relx=0.0, rely=0.133, relheight=0.342, relwidth=0.507)
					self.Display1.configure(background="white")
					self.Display1.configure(font="-family {Courier New} -size 8")
					self.Display1.configure(foreground="black")
					self.Display1.configure(highlightbackground="#d9d9d9")
					self.Display1.configure(highlightcolor="black")
					self.Display1.configure(insertbackground="black")
					self.Display1.configure(selectbackground="blue")
					self.Display1.configure(selectforeground="white")
					self.Display1.configure(wrap="word")

					self.Display2 = tk.Text(top)
					self.Display2.place(relx=0.0, rely=0.556, relheight=0.453, relwidth=0.507)

					self.Display2.configure(background="white")
					self.Display2.configure(font="-family {Courier New} -size 8")
					self.Display2.configure(foreground="black")
					self.Display2.configure(highlightbackground="#d9d9d9")
					self.Display2.configure(highlightcolor="black")
					self.Display2.configure(insertbackground="black")
					self.Display2.configure(selectbackground="blue")
					self.Display2.configure(selectforeground="white")
					self.Display2.configure(wrap="word")

					self.Display3 = tk.Text(top)
					self.Display3.place(relx=0.517, rely=0.778, relheight=0.209, relwidth=0.507)
					self.Display3.configure(background="white")
					self.Display3.configure(font="-family {Courier New} -size 8")
					self.Display3.configure(foreground="black")
					self.Display3.configure(highlightbackground="#d9d9d9")
					self.Display3.configure(highlightcolor="black")
					self.Display3.configure(insertbackground="black")
					self.Display3.configure(selectbackground="blue")
					self.Display3.configure(selectforeground="white")
					self.Display3.configure(wrap="word")

					self.Display4 = tk.Text(top)
					self.Display4.place(relx=0.517, rely=0.467, relheight=0.231, relwidth=0.49)
					self.Display4.configure(background="white")
					self.Display4.configure(font="-family {Courier New} -size 8")
					self.Display4.configure(foreground="black")
					self.Display4.configure(highlightbackground="#d9d9d9")
					self.Display4.configure(highlightcolor="black")
					self.Display4.configure(insertbackground="black")
					self.Display4.configure(selectbackground="blue")
					self.Display4.configure(selectforeground="white")
					self.Display4.configure(wrap="word")


					self.Display5 = tk.Text(top)
					self.Display5.place(relx=0.517, rely=0.133, relheight=0.253, relwidth=0.49)
					self.Display5.configure(background="white")
					self.Display5.configure(font="-family {Courier New} -size 8")
					self.Display5.configure(foreground="black")
					self.Display5.configure(highlightbackground="#d9d9d9")
					self.Display5.configure(highlightcolor="black")
					self.Display5.configure(insertbackground="black")
					self.Display5.configure(selectbackground="blue")
					self.Display5.configure(selectforeground="white")
					self.Display5.configure(wrap="word")
					
					
					

		if __name__ == '__main__':
			vp_start_gui()

else:
    # Re-run the program with admin rights
	ctypes.windll.shell32.ShellExecuteW(None, "runas", sys.executable, " ".join(sys.argv), None, 1)







